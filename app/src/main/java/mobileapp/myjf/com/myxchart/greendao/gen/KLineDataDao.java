package mobileapp.myjf.com.myxchart.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import mobileapp.myjf.com.myxchart.entity.util.KLineData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KLINE_DATA".
*/
public class KLineDataDao extends AbstractDao<KLineData, Long> {

    public static final String TABLENAME = "KLINE_DATA";

    /**
     * Properties of entity KLineData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Open = new Property(3, double.class, "open", false, "OPEN");
        public final static Property High = new Property(4, double.class, "high", false, "HIGH");
        public final static Property Low = new Property(5, double.class, "low", false, "LOW");
        public final static Property Close = new Property(6, double.class, "close", false, "CLOSE");
        public final static Property Ma5 = new Property(7, double.class, "Ma5", false, "MA5");
        public final static Property Ma10 = new Property(8, double.class, "Ma10", false, "MA10");
        public final static Property Ma30 = new Property(9, double.class, "Ma30", false, "MA30");
        public final static Property Macd_dif = new Property(10, double.class, "Macd_dif", false, "MACD_DIF");
        public final static Property Macd_dea = new Property(11, double.class, "Macd_dea", false, "MACD_DEA");
        public final static Property Macd = new Property(12, double.class, "Macd", false, "MACD");
        public final static Property Kdj_k = new Property(13, double.class, "Kdj_k", false, "KDJ_K");
        public final static Property Kdj_d = new Property(14, double.class, "Kdj_d", false, "KDJ_D");
        public final static Property Kdj_j = new Property(15, double.class, "Kdj_j", false, "KDJ_J");
        public final static Property Rsi1 = new Property(16, double.class, "Rsi1", false, "RSI1");
        public final static Property Rsi2 = new Property(17, double.class, "Rsi2", false, "RSI2");
        public final static Property Rsi3 = new Property(18, double.class, "Rsi3", false, "RSI3");
        public final static Property Bias1 = new Property(19, double.class, "Bias1", false, "BIAS1");
        public final static Property Bias2 = new Property(20, double.class, "Bias2", false, "BIAS2");
        public final static Property Bias3 = new Property(21, double.class, "Bias3", false, "BIAS3");
    };


    public KLineDataDao(DaoConfig config) {
        super(config);
    }
    
    public KLineDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KLINE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"OPEN\" REAL NOT NULL ," + // 3: open
                "\"HIGH\" REAL NOT NULL ," + // 4: high
                "\"LOW\" REAL NOT NULL ," + // 5: low
                "\"CLOSE\" REAL NOT NULL ," + // 6: close
                "\"MA5\" REAL NOT NULL ," + // 7: Ma5
                "\"MA10\" REAL NOT NULL ," + // 8: Ma10
                "\"MA30\" REAL NOT NULL ," + // 9: Ma30
                "\"MACD_DIF\" REAL NOT NULL ," + // 10: Macd_dif
                "\"MACD_DEA\" REAL NOT NULL ," + // 11: Macd_dea
                "\"MACD\" REAL NOT NULL ," + // 12: Macd
                "\"KDJ_K\" REAL NOT NULL ," + // 13: Kdj_k
                "\"KDJ_D\" REAL NOT NULL ," + // 14: Kdj_d
                "\"KDJ_J\" REAL NOT NULL ," + // 15: Kdj_j
                "\"RSI1\" REAL NOT NULL ," + // 16: Rsi1
                "\"RSI2\" REAL NOT NULL ," + // 17: Rsi2
                "\"RSI3\" REAL NOT NULL ," + // 18: Rsi3
                "\"BIAS1\" REAL NOT NULL ," + // 19: Bias1
                "\"BIAS2\" REAL NOT NULL ," + // 20: Bias2
                "\"BIAS3\" REAL NOT NULL );"); // 21: Bias3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KLINE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KLineData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindDouble(4, entity.getOpen());
        stmt.bindDouble(5, entity.getHigh());
        stmt.bindDouble(6, entity.getLow());
        stmt.bindDouble(7, entity.getClose());
        stmt.bindDouble(8, entity.getMa5());
        stmt.bindDouble(9, entity.getMa10());
        stmt.bindDouble(10, entity.getMa30());
        stmt.bindDouble(11, entity.getMacd_dif());
        stmt.bindDouble(12, entity.getMacd_dea());
        stmt.bindDouble(13, entity.getMacd());
        stmt.bindDouble(14, entity.getKdj_k());
        stmt.bindDouble(15, entity.getKdj_d());
        stmt.bindDouble(16, entity.getKdj_j());
        stmt.bindDouble(17, entity.getRsi1());
        stmt.bindDouble(18, entity.getRsi2());
        stmt.bindDouble(19, entity.getRsi3());
        stmt.bindDouble(20, entity.getBias1());
        stmt.bindDouble(21, entity.getBias2());
        stmt.bindDouble(22, entity.getBias3());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KLineData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindDouble(4, entity.getOpen());
        stmt.bindDouble(5, entity.getHigh());
        stmt.bindDouble(6, entity.getLow());
        stmt.bindDouble(7, entity.getClose());
        stmt.bindDouble(8, entity.getMa5());
        stmt.bindDouble(9, entity.getMa10());
        stmt.bindDouble(10, entity.getMa30());
        stmt.bindDouble(11, entity.getMacd_dif());
        stmt.bindDouble(12, entity.getMacd_dea());
        stmt.bindDouble(13, entity.getMacd());
        stmt.bindDouble(14, entity.getKdj_k());
        stmt.bindDouble(15, entity.getKdj_d());
        stmt.bindDouble(16, entity.getKdj_j());
        stmt.bindDouble(17, entity.getRsi1());
        stmt.bindDouble(18, entity.getRsi2());
        stmt.bindDouble(19, entity.getRsi3());
        stmt.bindDouble(20, entity.getBias1());
        stmt.bindDouble(21, entity.getBias2());
        stmt.bindDouble(22, entity.getBias3());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KLineData readEntity(Cursor cursor, int offset) {
        KLineData entity = new KLineData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.getLong(offset + 2), // time
            cursor.getDouble(offset + 3), // open
            cursor.getDouble(offset + 4), // high
            cursor.getDouble(offset + 5), // low
            cursor.getDouble(offset + 6), // close
            cursor.getDouble(offset + 7), // Ma5
            cursor.getDouble(offset + 8), // Ma10
            cursor.getDouble(offset + 9), // Ma30
            cursor.getDouble(offset + 10), // Macd_dif
            cursor.getDouble(offset + 11), // Macd_dea
            cursor.getDouble(offset + 12), // Macd
            cursor.getDouble(offset + 13), // Kdj_k
            cursor.getDouble(offset + 14), // Kdj_d
            cursor.getDouble(offset + 15), // Kdj_j
            cursor.getDouble(offset + 16), // Rsi1
            cursor.getDouble(offset + 17), // Rsi2
            cursor.getDouble(offset + 18), // Rsi3
            cursor.getDouble(offset + 19), // Bias1
            cursor.getDouble(offset + 20), // Bias2
            cursor.getDouble(offset + 21) // Bias3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KLineData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setOpen(cursor.getDouble(offset + 3));
        entity.setHigh(cursor.getDouble(offset + 4));
        entity.setLow(cursor.getDouble(offset + 5));
        entity.setClose(cursor.getDouble(offset + 6));
        entity.setMa5(cursor.getDouble(offset + 7));
        entity.setMa10(cursor.getDouble(offset + 8));
        entity.setMa30(cursor.getDouble(offset + 9));
        entity.setMacd_dif(cursor.getDouble(offset + 10));
        entity.setMacd_dea(cursor.getDouble(offset + 11));
        entity.setMacd(cursor.getDouble(offset + 12));
        entity.setKdj_k(cursor.getDouble(offset + 13));
        entity.setKdj_d(cursor.getDouble(offset + 14));
        entity.setKdj_j(cursor.getDouble(offset + 15));
        entity.setRsi1(cursor.getDouble(offset + 16));
        entity.setRsi2(cursor.getDouble(offset + 17));
        entity.setRsi3(cursor.getDouble(offset + 18));
        entity.setBias1(cursor.getDouble(offset + 19));
        entity.setBias2(cursor.getDouble(offset + 20));
        entity.setBias3(cursor.getDouble(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KLineData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KLineData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
